// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // sqlite -> postgresql
  url      = env("DATABASE_URL") // file:./dev.db -> env("DATABASE_URL")
}

// 학생 모델
model Student {
  id        String   @id @default(cuid())
  grade     Int // 학년
  classNum  Int // 반
  name      String // 이름
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  demerits   Demerit[]
  warnings   Warning[]
  expulsions Expulsion[]

  @@unique([grade, classNum, name], name: "unique_student")
}

// next-auth User 모델로 사용될 Admin 모델 (이름을 User로 변경)
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String // 암호화된 비밀번호 저장
  email         String?   @unique // next-auth User 모델에 필요 (선택 사항이지만 추가)
  emailVerified DateTime? // next-auth User 모델에 필요
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
}

// next-auth Account 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// next-auth Session 모델
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// next-auth VerificationToken 모델
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// 벌점 기록 모델
model Demerit {
  id        String   @id @default(cuid())
  points    Int // 벌점 수치
  reason    String // 벌점 사유
  assigner  String // 벌점 부여자 (관리자 이름)
  date      DateTime @default(now()) // 벌점 부여 일시
  
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// 경고 기록 모델
model Warning {
  id        String   @id @default(cuid())
  reason    String // 경고 사유
  date      DateTime @default(now()) // 경고 부여 일시

  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// 퇴출 기록 모델
model Expulsion {
  id        String   @id @default(cuid())
  startDate DateTime // 퇴출 시작일
  endDate   DateTime // 퇴출 종료일
  totalDays Int // 총 퇴출일
  status    String // 상태: PENDING (예정), ACTIVE (진행중), COMPLETED (완료)
  
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}