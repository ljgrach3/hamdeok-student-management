// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  username      String    @unique // Added for admin login
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Student       Student[] // Changed to array as a User can be linked to multiple Students if needed, or one-to-one if Student has unique userId
  Demerit       Demerit[]
  Warning       Warning[]
  Expulsion     Expulsion[]
  Session       Session[]
  Account       Account[]
}

model Student {
  id            String    @id @default(cuid())
  studentId     String    @unique
  name          String
  grade         Int
  classNum      Int
  studentNum    Int
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  Demerit       Demerit[]
  Warning       Warning[]
  Expulsion     Expulsion[]
  Attendance    Attendance[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([grade, classNum, studentNum], name: "unique_student_identifier") // Corrected unique constraint
}

model Demerit {
  id            String    @id @default(cuid())
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  reason        String
  score         Int
  issuedAt      DateTime  @default(now())
  issuedBy      String
  user          User      @relation(fields: [issuedBy], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Warning {
  id            String    @id @default(cuid())
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  reason        String
  issuedAt      DateTime  @default(now())
  issuedBy      String
  user          User      @relation(fields: [issuedBy], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Expulsion {
  id            String    @id @default(cuid())
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  reason        String
  startDate     DateTime
  endDate       DateTime
  issuedBy      String
  user          User      @relation(fields: [issuedBy], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Attendance {
  id            String    @id @default(cuid())
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  date          DateTime
  status        AttendanceStatus
  reason        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EARLY_LEAVE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}